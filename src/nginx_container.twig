{% spaceless %}
{% set certName = 'default' %}
{% set proto = 'http' %}
{% set httpsMethod = 'redirect' %}

{# Fetch ENV informations #}
{% for env in container.envs %}
  {% if 'CERT_NAME' in env %}
    {% set envArray = env|split('=') %}
    {% set certName = envArray[1] %}
  {% elseif 'VIRTUAL_PROTO' in env %}
    {% set envArray = env|split('=') %}
    {% set proto = envArray[1] %}
  {% elseif 'HTTPS_METHOD' in env %}
    {% set envArray = env|split('=') %}
    {% set httpsMethod = envArray[1] %}
  {% endif %}
{% endfor %}

{# Create server entries based on the current domain list #}
{% for domain in container.domain|split(',') %}
  {# domain may contain a port, if so split the string and fix variables values to contain only the appropriate value #}
  {% set httpPort = 80 %}
  {% if ':' in domain %}
    {% set domainArray = domain|split(':') %}
    {% set domain = domainArray[0] %}
    {% set httpPort = domainArray[1] %}
  {% endif %}
  {# Utility paths that will be required down below #}
  {% set crtPath = '/etc/nginx/certs/' ~ domain|default(certName) ~ '.crt' %}
  {% set keyPath = '/etc/nginx/certs/' ~ domain|default(certName) ~ '.key' %}
  {% set dhparamPath = '/etc/nginx/certs/' ~ domain|default(certName) ~ '.dhparam.pem' %}
  {% set vhostServerPath = '/etc/nginx/vhost.d/' ~ domain|default('default') %}
  {% set vhostLocationPath = '/etc/nginx/vhost.d/' ~ domain|default('default') ~ '_location' %}
  {% set vhostPasswdPath = '/etc/nginx/htpasswd/' ~ domain|default('default') %}
server {
  server_name {{ domain }};
  listen 80;
  listen [::]:80;

  {# Block spam bots, returning them an emtpy response #}
  if ($bad_referer) {
    return 444;
  }

  {% if httpsMethod == 'redirect' %}
    {# If we are safe to redirect, we will do it #}
    {% if crtPath|exists and keyPath|exists %}
  return 301 https://{{ domain }}$request_uri;
    {% endif %}
  {% endif %}

  {# Import custom rules defined for this vhost, if any #}
  {% if vhostServerPath|exists %}
  include {{ vhostServerPath }};
  {% endif %}

  location /.well-known/acme-challenge/ {
    auth_basic off;
    allow all;
    root /var/www/localhost/htdocs;
    try_files $uri =404;
    break;
  }

  location / {
    {# Define rule for reverse proxy #}
    {% if proto == 'uwsgi' %}
    include /etc/nginx/uwsgi_params;
    uwsgi_pass {{ proto }}://{{ container.A }}:{{ httpPort }};
    {% else %}
    proxy_pass {{ proto }}://{{ container.A }}:{{ httpPort }};
    {% endif %}

    {# Import custom htpasswd define for this vhost, if any #}
    {% if vhostPasswdPath|exists %}
    auth_basic "Restricted {{ domain }}";
    auth_basic_user_file {{ vhostPasswdPath }};
    {% endif %}

    {# Import custom rules defined for this vhost location, if any #}
    {% if vhostLocationPath|exists %}
    include {{ vhostLocationPath }};
    {% endif %}
  }
}

server {
  server_name {{ domain }};
  listen 443 ssl http2;
  listen [::]:443 ssl http2;

  {# SSL Certificates #}
  ssl_certificate {{ crtPath }};
  ssl_certificate_key {{ keyPath }};

  {# Define custom dhparam, if any #}
  {% if dhparamPath|exists %}
  ssl_dhparam {{ dhparamPath }};
  {% endif %}

  {# Import custom rules defined for this vhost, if any #}
  {% if vhostServerPath|exists %}
    include {{ vhostServerPath }};
  {% endif %}

  location / {
    {# Define rule for reverse proxy #}
    {% if proto == 'uwsgi' %}
    include /etc/nginx/uwsgi_params;
    uwsgi_pass {{ proto }}://{{ container.A }}:{{ httpPort }};
    {% else %}
    proxy_pass {{ proto }}://{{ container.A }}:{{ httpPort }};
    {% endif %}
    {# Import custom htpasswd define for this vhost, if any #}
    {% if vhostPasswdPath|exists %}
    auth_basic "Restricted {{ domain }}";
    auth_basic_user_file {{ vhostPasswdPath }};
    {% endif %}
    {# Import custom rules defined for this vhost location, if any #}
    {% if vhostLocationPath|exists %}
    include {{ vhostLocationPath }};
    {% endif %}
  }
}
{% endfor %}
{% endspaceless %}
